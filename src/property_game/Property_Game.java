/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package property_game;

import java.util.*;
import java.awt.Color;
import java.io.*;
import java.text.DecimalFormat;

/**
 *
 * @author David
 */


public class Property_Game extends javax.swing.JFrame {

    /**
     * Creates new form U4A3_Culminating
     */
    public Property_Game() {
        initComponents();
    }
    
    //Variables not final because loading from save requires writing.
    private int GAME_BOARD_HEIGHT = 7; //Game board is 7*7
    private int GAME_BOARD_WIDTH = 7;
    private double TAX_RATE = 0.01;    //Tax set to 1%
    private int STARTING_PLAYER_BALANCE = 1000000; //Players start with 500k
    private int MINIMUM_BLOCK_QUANTITY = 4;   //Generate between 4 and 8 blocks in total
    private int MAXIMUM_BLOCK_QUANTITY = 8;
    private int MINIMUM_HOUSE_PRICE = 100000;
    private int MAXIMUM_HOUSE_PRICE = 900000;
    
    private double BLOCK_FACTOR_MINIMUM = -0.03;
    private double BLOCK_FACTOR_MAXIMUM = 0.03;
    
    private double[] blockFactors;   //Holds block factors, size will be decided by randomized number of blocks.
    private int playerNumber = 0;    //Used to assign player numbers as well as keep track of current player.
    private House activeHouse;
    private Player currentPlayer;
    private boolean buttonStatus;   //If house grid buttons are enabled or not. Set to a variable so it can be saved and loaded.
            
    private ArrayList<ArrayList<House>> houseList = new ArrayList<>();  //Holds all houses in 2D array representing board
    private ArrayList<Player> playerList = new ArrayList<>();   
    
    private javax.swing.JButton[][] buttons = new javax.swing.JButton[GAME_BOARD_HEIGHT][GAME_BOARD_WIDTH];  //Array of button objects the size of the board.
    private Color[] buttonColors = {Color.RED, Color.GREEN, Color.BLUE, Color.MAGENTA, Color.WHITE, Color.DARK_GRAY, Color.ORANGE, Color.PINK, Color.LIGHT_GRAY};    //Button colors for blocks. Color[i] is color for block i.
    private final String[] alphabet = {"A", "B", "C", "D", "E", "F", "G"};
          
    DecimalFormat moneyFormat = new DecimalFormat("$#,###");
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buyHouse = new javax.swing.JDialog();
        lblBuyHouse = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblBuyBalance = new javax.swing.JLabel();
        lblBalanceAfterPurchase = new javax.swing.JLabel();
        txtHouseBuyPrice = new javax.swing.JTextField();
        txtPlayerBuyBalance = new javax.swing.JTextField();
        txtBalanceAfterPurchase = new javax.swing.JTextField();
        btnBuy = new javax.swing.JButton();
        btnBuyDecline = new javax.swing.JButton();
        txtBuyOutput = new javax.swing.JTextField();
        sellHouse = new javax.swing.JDialog();
        txtSellOutput = new javax.swing.JTextField();
        txtBalanceAfterSale = new javax.swing.JTextField();
        btnSell = new javax.swing.JButton();
        btnSellDecline = new javax.swing.JButton();
        txtPlayerSellBalance = new javax.swing.JTextField();
        txtHouseSellPrice = new javax.swing.JTextField();
        lblSellHouse = new javax.swing.JLabel();
        lblSellBalance = new javax.swing.JLabel();
        lblSell = new javax.swing.JLabel();
        lblBalanceAfterSale = new javax.swing.JLabel();
        playerBankrupt = new javax.swing.JDialog();
        lblDescription1 = new javax.swing.JLabel();
        lblDescription2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        txtPlayerBankrupt = new javax.swing.JTextField();
        gameFinished = new javax.swing.JDialog();
        lblGameFinished = new javax.swing.JLabel();
        txtWinnerOutput = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaResults = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btnOk2 = new javax.swing.JButton();
        A1 = new javax.swing.JButton();
        A2 = new javax.swing.JButton();
        A3 = new javax.swing.JButton();
        A4 = new javax.swing.JButton();
        A5 = new javax.swing.JButton();
        A6 = new javax.swing.JButton();
        A7 = new javax.swing.JButton();
        B1 = new javax.swing.JButton();
        B2 = new javax.swing.JButton();
        B3 = new javax.swing.JButton();
        B4 = new javax.swing.JButton();
        B5 = new javax.swing.JButton();
        B6 = new javax.swing.JButton();
        B7 = new javax.swing.JButton();
        C1 = new javax.swing.JButton();
        C2 = new javax.swing.JButton();
        C3 = new javax.swing.JButton();
        C4 = new javax.swing.JButton();
        C5 = new javax.swing.JButton();
        C6 = new javax.swing.JButton();
        C7 = new javax.swing.JButton();
        D1 = new javax.swing.JButton();
        D2 = new javax.swing.JButton();
        D3 = new javax.swing.JButton();
        D4 = new javax.swing.JButton();
        D5 = new javax.swing.JButton();
        D6 = new javax.swing.JButton();
        D7 = new javax.swing.JButton();
        E1 = new javax.swing.JButton();
        E2 = new javax.swing.JButton();
        E3 = new javax.swing.JButton();
        E4 = new javax.swing.JButton();
        E5 = new javax.swing.JButton();
        E6 = new javax.swing.JButton();
        E7 = new javax.swing.JButton();
        F1 = new javax.swing.JButton();
        F2 = new javax.swing.JButton();
        F3 = new javax.swing.JButton();
        F4 = new javax.swing.JButton();
        F5 = new javax.swing.JButton();
        F6 = new javax.swing.JButton();
        F7 = new javax.swing.JButton();
        G1 = new javax.swing.JButton();
        G2 = new javax.swing.JButton();
        G3 = new javax.swing.JButton();
        G4 = new javax.swing.JButton();
        G5 = new javax.swing.JButton();
        G6 = new javax.swing.JButton();
        G7 = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        lblGame = new javax.swing.JLabel();
        btnRestartGame = new javax.swing.JButton();
        btnStartGame = new javax.swing.JButton();
        lblNumberOfPlayers = new javax.swing.JLabel();
        rdoTwoPlayer = new javax.swing.JRadioButton();
        rdoThreePlayer = new javax.swing.JRadioButton();
        rdoFourPlayer = new javax.swing.JRadioButton();
        txtPlayerName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnAddPlayer = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCurrentPlayer = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPlayerBalance = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaProperties = new javax.swing.JTextArea();
        txtOutput = new javax.swing.JTextField();
        btnEndTurn = new javax.swing.JButton();

        buyHouse.setMinimumSize(new java.awt.Dimension(400, 350));
        buyHouse.setResizable(false);

        lblBuyHouse.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblBuyHouse.setText("Buy House?");

        lblPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPrice.setText("Price");

        lblBuyBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBuyBalance.setText("Your Balance");

        lblBalanceAfterPurchase.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBalanceAfterPurchase.setText("Balance After Purchase");

        txtHouseBuyPrice.setEditable(false);
        txtHouseBuyPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtPlayerBuyBalance.setEditable(false);
        txtPlayerBuyBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtBalanceAfterPurchase.setEditable(false);
        txtBalanceAfterPurchase.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnBuy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuy.setText("Buy");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        btnBuyDecline.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuyDecline.setText("Decline");
        btnBuyDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyDeclineActionPerformed(evt);
            }
        });

        txtBuyOutput.setEditable(false);
        txtBuyOutput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout buyHouseLayout = new javax.swing.GroupLayout(buyHouse.getContentPane());
        buyHouse.getContentPane().setLayout(buyHouseLayout);
        buyHouseLayout.setHorizontalGroup(
            buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyHouseLayout.createSequentialGroup()
                .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyHouseLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(lblBuyHouse))
                    .addGroup(buyHouseLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buyHouseLayout.createSequentialGroup()
                                .addComponent(lblBuyBalance)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPlayerBuyBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(buyHouseLayout.createSequentialGroup()
                                .addComponent(lblBalanceAfterPurchase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(txtBalanceAfterPurchase, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(buyHouseLayout.createSequentialGroup()
                                .addComponent(lblPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtHouseBuyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtBuyOutput))))
                .addGap(40, 40, 40))
            .addGroup(buyHouseLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(btnBuy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBuyDecline)
                .addGap(64, 64, 64))
        );
        buyHouseLayout.setVerticalGroup(
            buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyHouseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuyHouse)
                .addGap(31, 31, 31)
                .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(txtHouseBuyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuyBalance)
                    .addComponent(txtPlayerBuyBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalanceAfterPurchase)
                    .addComponent(txtBalanceAfterPurchase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuyOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buyHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuy)
                    .addComponent(btnBuyDecline))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        sellHouse.setMinimumSize(new java.awt.Dimension(400, 350));

        txtSellOutput.setEditable(false);
        txtSellOutput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtBalanceAfterSale.setEditable(false);
        txtBalanceAfterSale.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnSell.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSell.setText("Sell");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        btnSellDecline.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSellDecline.setText("Decline");
        btnSellDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellDeclineActionPerformed(evt);
            }
        });

        txtPlayerSellBalance.setEditable(false);
        txtPlayerSellBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtHouseSellPrice.setEditable(false);
        txtHouseSellPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblSellHouse.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblSellHouse.setText("Sell House?");

        lblSellBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSellBalance.setText("Your Balance");

        lblSell.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSell.setText("Price");

        lblBalanceAfterSale.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBalanceAfterSale.setText("Balance After Sale");

        javax.swing.GroupLayout sellHouseLayout = new javax.swing.GroupLayout(sellHouse.getContentPane());
        sellHouse.getContentPane().setLayout(sellHouseLayout);
        sellHouseLayout.setHorizontalGroup(
            sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellHouseLayout.createSequentialGroup()
                .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sellHouseLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(lblSellHouse))
                    .addGroup(sellHouseLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sellHouseLayout.createSequentialGroup()
                                .addComponent(lblSellBalance)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPlayerSellBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(sellHouseLayout.createSequentialGroup()
                                .addComponent(lblBalanceAfterSale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addComponent(txtBalanceAfterSale, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(sellHouseLayout.createSequentialGroup()
                                .addComponent(lblSell)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtHouseSellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtSellOutput))))
                .addGap(40, 40, 40))
            .addGroup(sellHouseLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(btnSell)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSellDecline)
                .addGap(64, 64, 64))
        );
        sellHouseLayout.setVerticalGroup(
            sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellHouseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSellHouse)
                .addGap(31, 31, 31)
                .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSell)
                    .addComponent(txtHouseSellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSellBalance)
                    .addComponent(txtPlayerSellBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalanceAfterSale)
                    .addComponent(txtBalanceAfterSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSellOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sellHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSell)
                    .addComponent(btnSellDecline))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        playerBankrupt.setMinimumSize(new java.awt.Dimension(400, 350));

        lblDescription1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDescription1.setText("They have beeen removed from the game");

        lblDescription2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDescription2.setText("and their properties are now availible");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("for purchase by other players.");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        txtPlayerBankrupt.setEditable(false);
        txtPlayerBankrupt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPlayerBankrupt.setText("Player has gone bankrupt!");

        javax.swing.GroupLayout playerBankruptLayout = new javax.swing.GroupLayout(playerBankrupt.getContentPane());
        playerBankrupt.getContentPane().setLayout(playerBankruptLayout);
        playerBankruptLayout.setHorizontalGroup(
            playerBankruptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerBankruptLayout.createSequentialGroup()
                .addGroup(playerBankruptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerBankruptLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(playerBankruptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDescription1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(playerBankruptLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblDescription2))
                            .addGroup(playerBankruptLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel1))
                            .addComponent(txtPlayerBankrupt)))
                    .addGroup(playerBankruptLayout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(btnOK)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        playerBankruptLayout.setVerticalGroup(
            playerBankruptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerBankruptLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(txtPlayerBankrupt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(lblDescription1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDescription2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(btnOK)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        gameFinished.setMinimumSize(new java.awt.Dimension(400, 508));

        lblGameFinished.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblGameFinished.setText("Game Finished");

        txtWinnerOutput.setEditable(false);
        txtWinnerOutput.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        txtWinnerOutput.setText("Player wins!");

        txtaResults.setEditable(false);
        txtaResults.setColumns(20);
        txtaResults.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        txtaResults.setRows(5);
        jScrollPane2.setViewportView(txtaResults);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Results");

        btnOk2.setText("Ok");
        btnOk2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOk2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gameFinishedLayout = new javax.swing.GroupLayout(gameFinished.getContentPane());
        gameFinished.getContentPane().setLayout(gameFinishedLayout);
        gameFinishedLayout.setHorizontalGroup(
            gameFinishedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameFinishedLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(lblGameFinished)
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(gameFinishedLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gameFinishedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(txtWinnerOutput))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(gameFinishedLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(gameFinishedLayout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(btnOk2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gameFinishedLayout.setVerticalGroup(
            gameFinishedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameFinishedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblGameFinished)
                .addGap(18, 18, 18)
                .addComponent(txtWinnerOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnOk2)
                .addGap(24, 24, 24))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        A1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A1.setText("A1");
        A1.setEnabled(false);
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A2.setText("A2");
        A2.setEnabled(false);
        A2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A3.setText("A3");
        A3.setEnabled(false);
        A3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A4.setText("A4");
        A4.setEnabled(false);
        A4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A5.setText("A5");
        A5.setEnabled(false);
        A5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A6.setText("A6");
        A6.setEnabled(false);
        A6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        A7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A7.setText("A7");
        A7.setEnabled(false);
        A7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B1.setText("B1");
        B1.setEnabled(false);
        B1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B2.setText("B2");
        B2.setEnabled(false);
        B2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B3.setText("B3");
        B3.setEnabled(false);
        B3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B4.setText("B4");
        B4.setEnabled(false);
        B4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B5.setText("B5");
        B5.setEnabled(false);
        B5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B6.setText("B6");
        B6.setEnabled(false);
        B6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        B7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B7.setText("B7");
        B7.setEnabled(false);
        B7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C1.setText("C1");
        C1.setEnabled(false);
        C1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C2.setText("C2");
        C2.setEnabled(false);
        C2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C3.setText("C3");
        C3.setEnabled(false);
        C3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C4.setText("C4");
        C4.setEnabled(false);
        C4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C5.setText("C5");
        C5.setEnabled(false);
        C5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C6.setText("C6");
        C6.setEnabled(false);
        C6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        C7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        C7.setText("C7");
        C7.setEnabled(false);
        C7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D1.setText("D1");
        D1.setEnabled(false);
        D1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D2.setText("D2");
        D2.setEnabled(false);
        D2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D3.setText("D3");
        D3.setEnabled(false);
        D3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D4.setText("D4");
        D4.setEnabled(false);
        D4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D5.setText("D5");
        D5.setEnabled(false);
        D5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D6.setText("D6");
        D6.setEnabled(false);
        D6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        D7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        D7.setText("D7");
        D7.setEnabled(false);
        D7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E1.setText("E1");
        E1.setEnabled(false);
        E1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E2.setText("E2");
        E2.setEnabled(false);
        E2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E3.setText("E3");
        E3.setEnabled(false);
        E3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E4.setText("E4");
        E4.setEnabled(false);
        E4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E5.setText("E5");
        E5.setEnabled(false);
        E5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E6.setText("E6");
        E6.setEnabled(false);
        E6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        E7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        E7.setText("E7");
        E7.setEnabled(false);
        E7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F1.setText("F1");
        F1.setEnabled(false);
        F1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F2.setText("F2");
        F2.setEnabled(false);
        F2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F3.setText("F3");
        F3.setEnabled(false);
        F3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F4.setText("F4");
        F4.setEnabled(false);
        F4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F5.setText("F5");
        F5.setEnabled(false);
        F5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F6.setText("F6");
        F6.setEnabled(false);
        F6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        F7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        F7.setText("F7");
        F7.setEnabled(false);
        F7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G1.setText("G1");
        G1.setEnabled(false);
        G1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G2.setText("G2");
        G2.setEnabled(false);
        G2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G3.setText("G3");
        G3.setEnabled(false);
        G3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G4.setText("G4");
        G4.setEnabled(false);
        G4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G5.setText("G5");
        G5.setEnabled(false);
        G5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G6.setText("G6");
        G6.setEnabled(false);
        G6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        G7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        G7.setText("G7");
        G7.setEnabled(false);
        G7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        btnSave.setText("Save Game");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load Last Save");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        lblGame.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblGame.setText("Game");

        btnRestartGame.setText("Restart Game");
        btnRestartGame.setEnabled(false);
        btnRestartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartGameActionPerformed(evt);
            }
        });

        btnStartGame.setText("Start Game");
        btnStartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartGameActionPerformed(evt);
            }
        });

        lblNumberOfPlayers.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNumberOfPlayers.setText("Number of Players");

        buttonGroup1.add(rdoTwoPlayer);
        rdoTwoPlayer.setSelected(true);
        rdoTwoPlayer.setText("2");

        buttonGroup1.add(rdoThreePlayer);
        rdoThreePlayer.setText("3");

        buttonGroup1.add(rdoFourPlayer);
        rdoFourPlayer.setText("4");

        txtPlayerName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPlayerName.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Player Name");

        btnAddPlayer.setText("Add Player");
        btnAddPlayer.setEnabled(false);
        btnAddPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlayerActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Player");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Properties Owned");

        txtCurrentPlayer.setEditable(false);
        txtCurrentPlayer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Balance");

        txtPlayerBalance.setEditable(false);
        txtPlayerBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtaProperties.setEditable(false);
        txtaProperties.setColumns(20);
        txtaProperties.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        txtaProperties.setRows(5);
        jScrollPane1.setViewportView(txtaProperties);

        txtOutput.setEditable(false);
        txtOutput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnEndTurn.setText("End Turn");
        btnEndTurn.setEnabled(false);
        btnEndTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndTurnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRestartGame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStartGame)
                        .addGap(187, 187, 187)
                        .addComponent(lblGame)
                        .addGap(272, 453, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(G7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(74, 74, 74))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                            .addComponent(txtPlayerBalance)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(rdoTwoPlayer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoThreePlayer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoFourPlayer)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddPlayer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNumberOfPlayers)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(A4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(A5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEndTurn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGame)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRestartGame)
                        .addComponent(btnStartGame)))
                .addGap(16, 16, 16)
                .addComponent(lblNumberOfPlayers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoTwoPlayer)
                    .addComponent(rdoThreePlayer)
                    .addComponent(rdoFourPlayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddPlayer)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEndTurn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(C7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(D7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(E7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(G7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtPlayerBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLoad)
                            .addComponent(btnSave))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void setButtonArray(){   //Sets array elements to button objects.
        buttons[0][0] = A1;
        buttons[1][0] = A2;
        buttons[2][0] = A3;
        buttons[3][0] = A4;
        buttons[4][0] = A5;
        buttons[5][0] = A6;
        buttons[6][0] = A7;
        
        buttons[0][1] = B1;
        buttons[1][1] = B2;
        buttons[2][1] = B3;
        buttons[3][1] = B4;
        buttons[4][1] = B5;
        buttons[5][1] = B6;
        buttons[6][1] = B7;
        
        buttons[0][2] = C1;
        buttons[1][2] = C2;
        buttons[2][2] = C3;
        buttons[3][2] = C4;
        buttons[4][2] = C5;
        buttons[5][2] = C6;
        buttons[6][2] = C7;
        
        buttons[0][3] = D1;
        buttons[1][3] = D2;
        buttons[2][3] = D3;
        buttons[3][3] = D4;
        buttons[4][3] = D5;
        buttons[5][3] = D6;
        buttons[6][3] = D7;
        
        buttons[0][4] = E1;
        buttons[1][4] = E2;
        buttons[2][4] = E3;
        buttons[3][4] = E4;
        buttons[4][4] = E5;
        buttons[5][4] = E6;
        buttons[6][4] = E7;
        
        buttons[0][5] = F1;
        buttons[1][5] = F2;
        buttons[2][5] = F3;
        buttons[3][5] = F4;
        buttons[4][5] = F5;
        buttons[5][5] = F6;
        buttons[6][5] = F7;
        
        buttons[0][6] = G1;
        buttons[1][6] = G2;
        buttons[2][6] = G3;
        buttons[3][6] = G4;
        buttons[4][6] = G5;
        buttons[5][6] = G6;
        buttons[6][6] = G7;
    }
    
    private void assignActionCommand(){ //Assigns buttons ActionCommands that are coodinates of their position on the board
        A1.setActionCommand("0,0");
        A2.setActionCommand("1,0");
        A3.setActionCommand("2,0");
        A4.setActionCommand("3,0");
        A5.setActionCommand("4,0");
        A6.setActionCommand("5,0");
        A7.setActionCommand("6,0");
        B1.setActionCommand("0,1");
        B2.setActionCommand("1,1");
        B3.setActionCommand("2,1");
        B4.setActionCommand("3,1");
        B5.setActionCommand("4,1");
        B6.setActionCommand("5,1");
        B7.setActionCommand("6,1");
        C1.setActionCommand("0,2");
        C2.setActionCommand("1,2");
        C3.setActionCommand("2,2");
        C4.setActionCommand("3,2");
        C5.setActionCommand("4,2");
        C6.setActionCommand("5,2");
        C7.setActionCommand("6,2");
        D1.setActionCommand("0,3");
        D2.setActionCommand("1,3");
        D3.setActionCommand("2,3");
        D4.setActionCommand("3,3");
        D5.setActionCommand("4,3");
        D6.setActionCommand("5,3");
        D7.setActionCommand("6,3");
        E1.setActionCommand("0,4");
        E2.setActionCommand("1,4");
        E3.setActionCommand("2,4");
        E4.setActionCommand("3,4");
        E5.setActionCommand("4,4");
        E6.setActionCommand("5,4");
        E7.setActionCommand("6,4");
        F1.setActionCommand("0,5");
        F2.setActionCommand("1,5");
        F3.setActionCommand("2,5");
        F4.setActionCommand("3,5");
        F5.setActionCommand("4,5");
        F6.setActionCommand("5,5");
        F7.setActionCommand("6,5");
        G1.setActionCommand("0,6");
        G2.setActionCommand("1,6");
        G3.setActionCommand("2,6");
        G4.setActionCommand("3,6");
        G5.setActionCommand("4,6");
        G6.setActionCommand("5,6");
        G7.setActionCommand("6,6");
        
    }
    
    private int getNumberOfPlayers(){    //Gets number of players from radio button selection. Returns as integer.
        if(rdoTwoPlayer.isSelected()){
            return 2;
        }
        else if(rdoThreePlayer.isSelected()){
            return 3;
        }
        else if(rdoFourPlayer.isSelected()){
            return 4;
        }
        return 0;
    }
    
    private void toggleButtons(boolean buttonStatus){ //Sets enabled status of house grid buttons. Parameters are boolean buttonStatus. Calling function with buttonStatus = true sets house grid buttons to be enabled, false disables them.
       setButtonArray();
        for(int i = 0; i<GAME_BOARD_WIDTH; i++){    
            for(int j = 0; j<GAME_BOARD_HEIGHT; j++){
                buttons[i][j].setEnabled(buttonStatus); //Inner loop runs for every button. i represents x axis, j represents y axis.
            }
        }
    }
    
    private javax.swing.JButton coordinateToButton(String coordinate){   //Parameters are String coordinate in format x,y as input. Outputs button object with coordinate location on game board.
        int x, y;
        
        String[] splitCoordinate = coordinate.split(",");       //Split coordinate into x and y, to allow parsing
        x = Integer.parseInt(splitCoordinate[0]);
        y = Integer.parseInt(splitCoordinate[1]);

        return buttons[x][y];   //Return button object corresponding to given coordinate
    }
    
    private House coordinateToHouse(ArrayList<ArrayList<House>> houseList, String coordinate){  //Parameters are 2D ArrayList of house objects, and String coordinate in format x,y. Outputs house object from ArrayList with coordinate location within ArrayList.
        int x, y;
        String[] splitCoordinate = coordinate.split(",");       //Split coordinate into x and y, to allow parsing
        x = Integer.parseInt(splitCoordinate[0]);
        y = Integer.parseInt(splitCoordinate[1]);
        
        return houseList.get(x).get(y); //Get house object that corresponds with the coordinate
    }
    
    private ArrayList<ArrayList<House>> createHouses(){ //Creates 2D ArrayList with dimensions of GAME_BOARD_WIDTH*GAME_BOARD_HEIGHT full of house objects. Assigns each house object a coordinate to signify its position in the ArrayList, and a boardName to signify its corresponding button. Returns ArrayList of house
        ArrayList<ArrayList<House>> houseList = new ArrayList<>();
        
        String coordinate, boardName; 
        
        for(int i = 0; i<GAME_BOARD_WIDTH; i++){    //y axis of coordinate
            ArrayList<House> list = new ArrayList<>();
            for(int j = 0; j<GAME_BOARD_HEIGHT; j++){   //x axis of coordinate
                coordinate = Integer.toString(i)+","+Integer.toString(j);   //Coordinate postion of house object in 2D ArrayList
                boardName = alphabet[j]+(i+1);  //boardName corresponds with name of button on game board that represents house.
                House house = new House(coordinate, boardName);    //Create house object with attributes set.
                list.add(house);
            }
            houseList.add(list);
        }
        return houseList;
    }
    
    private void generateBlocks(){    //Generates number of blocks on first and second row and generates block factors for each block. Calls functions to generate the sizes of blocks and to assign houses to blocks.
        int numberOfBlocks = (int)(Math.random()*(MAXIMUM_BLOCK_QUANTITY-MINIMUM_BLOCK_QUANTITY))+MINIMUM_BLOCK_QUANTITY;  //Generate the total number of blocks
        
        blockFactors = new double[numberOfBlocks];
        
        for(int i =0; i<numberOfBlocks; i++){   //Generate blockFactors for each block
            blockFactors[i] = (Math.random()*(BLOCK_FACTOR_MINIMUM-BLOCK_FACTOR_MAXIMUM))-BLOCK_FACTOR_MINIMUM; //blockFactors affect the price trend of houses positivly or negatively.
            blockFactors[i] = (Math.round((blockFactors[i])*1000.0))/1000.0;  //Round number to nearest thousandth
        }
        
        int blockHeight = 1+(int)(Math.random()*GAME_BOARD_HEIGHT); //Depth of first row of blocks               
        
        int firstRowBlockCount= numberOfBlocks/2;   //Split the blocks between the top and bottom rows
        int secondRowBlockCount = numberOfBlocks - firstRowBlockCount;
        
        int[] firstRowBlocks = new int[firstRowBlockCount];  //Initialize block arrays to hold block lengths for each row. Block arrays are sized to the number of blocks per row.
        int[] secondRowBlocks = new int [secondRowBlockCount];
        
        firstRowBlocks = getBlockData(firstRowBlockCount, GAME_BOARD_WIDTH);    //Call function to generate randomized block widths.
        secondRowBlocks = getBlockData(secondRowBlockCount, GAME_BOARD_WIDTH);
        
        assignBlocks(firstRowBlocks, secondRowBlocks, blockHeight); //Call function to assign houses to blocks
        
    }
    
    private int[] getBlockData(int blockQuantitiy, int houseQuantity){  //Generates random lengths of blocks for blockQuantity number of blocks, assuming there are houseQuantity number of houses to divide among blocks and each block must have at least 1 house. Returns 1D int array containing block lengths.
        
        int unassignedBlocks;   //Number of blocks without houses assigned to them.
        int[] blocks = new int[blockQuantitiy]; 
        
        for(int i = 0; i < blockQuantitiy; i++){   //Generate block widths for each block
            unassignedBlocks = blockQuantitiy+1-i;  
            unassignedBlocks = houseQuantity - unassignedBlocks;    //Max number of houses in a block
            blocks[i]= 1+(int)(Math.random()*(unassignedBlocks));   //Maximum block size set to number of houses - blocks without houses. Leaves a minimum of 1 house per remaining block.
            houseQuantity -= blocks[i]; 
        }
        
        if(houseQuantity!=0){   //Add any unassigned houses to the first block
            blocks[0]+=houseQuantity;   
        }
        return blocks;
    }
    
    private void assignBlocks(int[] firstRowBlocks, int[] secondRowBlocks, int blockHeight){    //Assigns houses to blocks using block lengths from firstRowBlocks and secondRowBlocks. The height/length of the first row blocks is defined by blockHeight.
        House house;
        
        System.out.println(Arrays.toString(firstRowBlocks));
        
        int houseInRow = 0;     //x axis value of house currently being assigned to a block
        int blockNumber = 0;    //Block which is currently having houses assigned to it
        
        for(int block = 0; block < firstRowBlocks.length; block++){ //Loops to assign houses to every block
            for(int houseInBlock = 0; houseInBlock <firstRowBlocks[block]; houseInBlock ++){    //x axis of houses being assigned
                for(int column = 0; column <blockHeight; column++){                 //y axis of houses being assigned
                    houseList.get(houseInRow).get(column).setBlock(blockNumber); //set block of house
                    buttons[houseInRow][column].setBackground(buttonColors[blockNumber]);
                }
                houseInRow++; 
            }
            blockNumber++;
        }
        
        houseInRow = 0; //Reset house in row value before second row blocks are assigned
        
        //Process is repeated for second set of blocks
        for(int block = 0; block < secondRowBlocks.length; block++){       
            for(int houseInBlock = 0; houseInBlock <secondRowBlocks[block]; houseInBlock ++){
                for(int column = blockHeight; column <GAME_BOARD_HEIGHT; column++){                 
                    houseList.get(houseInRow).get(column).setBlock(blockNumber); //set block of house
                    buttons[houseInRow][column].setBackground(buttonColors[blockNumber]);
                }
                houseInRow++; 
            }
            blockNumber++;
        }
    }
    
    private void displayCurrentPlayer(){ //Displays name, balance, and houses owned of the player whos turn it currently is. Displays in text fields and text areas. Also resets all button text color to black in preparation for player specific coloring.
        
        Player currentPlayer = playerList.get(playerNumber);    //Gets current player as object. 
        
        txtCurrentPlayer.setText(currentPlayer.getName());  //Sets player information in text boxes
        txtPlayerBalance.setText(moneyFormat.format(currentPlayer.getBalance()));
        txtaProperties.setText("");
        
        toggleButtons(buttonStatus);
        
        ArrayList<House> currentHouses;
        House house;
        String houseCoordinates;
        String housePrice;
        
        for(int i =0; i<currentPlayer.getAllHouses().size(); i++){  //Lists houses owned by player along with their prices.
            currentHouses = currentPlayer.getAllHouses();
            house = currentHouses.get(i);
            houseCoordinates = house.getCoordinate();
            housePrice = Integer.toString(house.getPrice());
            txtaProperties.append(house.getBoardName()+": "+moneyFormat.format(Integer.parseInt(housePrice))+"\n");
        }
        
        for(int i=0; i<GAME_BOARD_WIDTH; i++){  //Reset text colors to black before colors are applied for current player in displayAvailible()
            for(int j=0; j<GAME_BOARD_HEIGHT; j++){
                    buttons[i][j].setForeground(Color.BLACK);
                }
            }
        }
    
    private void displayAvailible(){ //Marks houses that current player owns and does not own. Buttons that represent houses owned by other players are greyed out. Buttons that represent houses owned by player whos turn it currently is have yellow text.
        for(int i=0; i<GAME_BOARD_WIDTH; i++){
            for(int j=0; j<GAME_BOARD_HEIGHT; j++){
                
                if(houseList.get(i).get(j).getOwner()!=playerList.get(playerNumber)&&houseList.get(i).get(j).getOwner()!= null){    //Disable buttons for houses owned by other players.
                    buttons[i][j].setEnabled(false);
                }
                if(houseList.get(i).get(j).getOwner()==playerList.get(playerNumber)){   //Display text as yellow for houses owned by current player
                    buttons[i][j].setForeground(Color.YELLOW);
                }
            }
        }
    }
    
    private int applyTax(Player currentPlayer){  //Calcualtes and subtracts property tax from balance of currentPlayer. Accepts Player object currentPlayer to deduct tax from.
        double taxAmount = 0;
        int roundedTax;
        ArrayList <House> houses = currentPlayer.getAllHouses();    //Gets ArrayList containing houses of player
        
        for(int i = 0; i<currentPlayer.getAllHouses().size(); i++){
            taxAmount += (houses.get(i).getPrice()*TAX_RATE);   //Total tax is the sum of tax from each house
        }
        
        roundedTax = (int)Math.round(taxAmount);    //Round to nearest integer
        currentPlayer.setBalance(currentPlayer.getBalance()-roundedTax);    //Subtract the tax from the player's balance.
        
        return roundedTax;  //Return the taxed amount so that it can be displayed
    }
    
    private void setHousePrice(){ //Randomly generates prices of all houses with houseBlockFactor affecting price. Used at beginning of game to set inital prices.
        
        double houseBlockFactor;
        int housePrice;
        int blockFactorIndex;
        
        for(int i=0; i<GAME_BOARD_WIDTH; i++){
            for(int j=0; j<GAME_BOARD_HEIGHT; j++){
                housePrice = 0;
                blockFactorIndex = houseList.get(i).get(j).getBlock();  //Gets block of house from house object
                houseBlockFactor = blockFactors[blockFactorIndex];  //Gets block factor from blockFactors array
                housePrice = (int)(Math.random()*(MAXIMUM_HOUSE_PRICE-MINIMUM_HOUSE_PRICE))+MINIMUM_HOUSE_PRICE;    //Generates random price in range
                housePrice += housePrice*houseBlockFactor;  //Adds additional amount based on blockFactor
                houseList.get(i).get(j).setPrice(housePrice);
                System.out.println(housePrice);
            }
        }
    }
    
    public boolean checkPlayer(Player player){  //Checks if player is bankrupt. If player is, function removes player from game and returns properties to pool then returns true. Otherwise, it returns false. Accepts Player object player to check for bankrupcy.
        if(player.getBalance()<=0){ //If player has no money left
            playerBankrupt.setVisible(true);    //Enable player bankrupt window notification
            txtPlayerBankrupt.setText(player.getName()+" has gone bankrupt!");
            displayCurrentPlayer();
            player.clearHouses();   //Clear player ownership of all houses owned by bankrupt player
            playerList.remove(player);   //Remove bankrupt player from list
            playerNumber --;    //Decrement playerNumber because player was removed. playerNumber will be incremented when player clicks end turn
            
            if(playerNumber<0){
                playerNumber = playerList.size()-1;   //If first player is removed, roll over player number to last player.
            }
            buttonStatus = false;
            toggleButtons(buttonStatus);    //Disable other buttons
            txtOutput.setText("Click End Turn to continue.");
            
            return true; 
        }
        return false;   
    }
    
    public boolean checkGameState(){    //Checks if game end conditions are fufilled (1 player left, all houses bought) If game should be over, function creates JDialog containing game results such as individual player names, balances and properties, and game winner. Returns true if game should end, false if it should not.
        int boughtHouseCounter = 0;
        
        if(playerList.size()<=1){   //If there are 1 or fewer players left
            playerBankrupt.dispose();   //Dispose of bankrupcy window because it is not needed at end game.
            ArrayList<House> houses = playerList.get(0).getAllHouses();
            int totalAssets = 0;
            String housesOwned ="";
            
            for(int i = 0; i<houses.size(); i++){
                totalAssets += houses.get(i).getPrice();
                housesOwned+=(houses.get(i).getBoardName());
                    if(i!=houses.size()-1){ //If house just printed isn't last, add a comma behind it.
                        housesOwned+=", ";
                    }
            }
            
            //Output player information
            txtaResults.setText("");
            txtWinnerOutput.setText(playerList.get(0).getName()+" wins!");
            txtaResults.append("Player Name: "+playerList.get(0).getName()+"\n");
            txtaResults.append("Player Balance: "+moneyFormat.format(playerList.get(0).getBalance())+"\n");
            txtaResults.append("Houses Owned: "+housesOwned+"\n");
            txtaResults.append("Total Assets: "+moneyFormat.format(totalAssets)+"\n");
            gameFinished.setVisible(true);
            
            gameEnd();
            return true;
        }
        
        for(int i =0; i<GAME_BOARD_WIDTH; i++){
            for(int j = 0; j<GAME_BOARD_HEIGHT; j++){
                if(houseList.get(i).get(j).getOwner() != null){ //If house has an owner
                    boughtHouseCounter++;
                }
            }
        }
        
        if(boughtHouseCounter >= (GAME_BOARD_WIDTH*GAME_BOARD_HEIGHT)){ //If number of houses bought are greater or equal than the total of houses.
            int largestTotalAssets = 0;
            String winnerName ="";
            txtaResults.setText("");
            for(int i = 0; i<playerList.size(); i++){   //If there are more than 1 player left, display results for them all
                ArrayList<House> houses = playerList.get(i).getAllHouses();
                int totalAssets = 0;
                String housesOwned ="";
            
                for(int j = 0; j<houses.size(); j++){
                    totalAssets += houses.get(j).getPrice();
                    housesOwned+=(houses.get(j).getBoardName());
                    if(j!=houses.size()-1){ //If house just printed isn't last, add a comma behind it.
                        housesOwned+=", ";
                    }
                }
                
                if(totalAssets>largestTotalAssets){
                    largestTotalAssets = totalAssets;
                    winnerName = playerList.get(i).getName();
                }
                
                txtaResults.append("Player Name: "+playerList.get(i).getName()+"\n");
                txtaResults.append("Player Balance: $"+playerList.get(i).getBalance()+"\n");
                txtaResults.append("Houses Owned: "+housesOwned+"\n");
                txtaResults.append("Total Assets: "+moneyFormat.format(totalAssets)+"\n"+"\n");
                gameFinished.setVisible(true);

            }
            
            txtWinnerOutput.setText(winnerName+" wins!");
            
            gameEnd();
            return true;
        }
        return false;
        
    }
    
    public void gameEnd(){  //Disables buttons at end of game. Used when game ends.
        buttonStatus = false;
        toggleButtons(buttonStatus);    //Disable other buttons
        btnEndTurn.setEnabled(false);   //Disable end turn button
    }
    
    public void gameLoop(){ //Handles calling functions to apply tax and calling functions to check for win/loss conditions. Also calls function to update player information boxes and board for player whos turn it currently is. Also calls functions to update house prices for all houses. Run every turn.
        currentPlayer = playerList.get(playerNumber);
        int tax = applyTax(currentPlayer);
        
        if(!checkPlayer(currentPlayer)){           //Check current player for bankrupcy right after applying taxes
            txtOutput.setText(moneyFormat.format(tax)+" of tax deducted for "+currentPlayer.getAllHouses().size()+ " properties.");
            displayCurrentPlayer();
            displayAvailible();
        }
        
        if(checkGameState()){   //Check game state to see if game should end.
            
        }
        
        for(int i=0; i<GAME_BOARD_WIDTH; i++){      //Update prices of all houses.
            for(int j=0; j<GAME_BOARD_HEIGHT; j++){
                houseList.get(i).get(j).updateHousePrice(blockFactors[houseList.get(i).get(j).getBlock()]);
            }
        }
        
    }
    
    private void btnStartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartGameActionPerformed
        // TODO add your handling code here:
        
        //Sets variables and button states to begin accepting players. Also sets states of windows and runs pre-game functions.
        
        assignActionCommand();  //Assign action commands to buttons, so clicks can be parsed;
        setButtonArray();   //Assign button objects to button array
        houseList = createHouses(); //Create houses and add them to houseList
        generateBlocks();   //Generate blocks and assign houses to them
        
        btnAddPlayer.setEnabled(true); 
        txtPlayerName.setEnabled(true);
        btnStartGame.setEnabled(false);
        btnSave.setEnabled(true);
        
        rdoTwoPlayer.setEnabled(false); //Disable changing player count after start
        rdoThreePlayer.setEnabled(false);
        rdoFourPlayer.setEnabled(false);
        
        buyHouse.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE); //Notification boxes can only be closed by clicking Ok
        sellHouse.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        playerBankrupt.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        gameFinished.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        setHousePrice();    //Generate randomized house prices
  
    }//GEN-LAST:event_btnStartGameActionPerformed

    private void buttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction
        // TODO add your handling code here:
        
        //Handles events such as buy/sell after button representing house on game board is clicked.
        
        String button = evt.getActionCommand(); //Get action command to find corresponding house object.
        
        House house = coordinateToHouse(houseList,button);  //Get house object for button pressed.
        
        txtBuyOutput.setText(""); //Reset buyOutput text box
        System.out.println(house.getCoordinate());
        System.out.println("House block :"+house.getBlock());
        System.out.println("BlockFactor :"+blockFactors[house.getBlock()]);
        btnEndTurn.setEnabled(false);   //Disable button when action box is open.
        
        if(house.getOwner()!=playerList.get(playerNumber)){ //If house is not owned by player
            
            //Prepare and display buy house dialog
            int difference = playerList.get(playerNumber).getBalance()-house.getPrice();
            txtHouseBuyPrice.setText(moneyFormat.format(house.getPrice()));
            txtPlayerBuyBalance.setText(moneyFormat.format((playerList.get(playerNumber).getBalance())));
            txtBalanceAfterPurchase.setText(moneyFormat.format(difference));
            activeHouse = house;
            btnBuy.setEnabled(true);
            if(house.getPrice()>(playerList.get(playerNumber).getBalance())){   //If player cannot afford house, disable buy dialog
                btnBuy.setEnabled(false);
                txtBuyOutput.setText("You do not have enough money.");
            }
            buyHouse.setVisible(true);
        }
        else{   //If house is owned by player
            
            //Prepare and display sell house dialog
            int sum = (playerList.get(playerNumber).getBalance()+house.getPrice());
            txtHouseSellPrice.setText(moneyFormat.format(house.getPrice()));
            txtPlayerSellBalance.setText(moneyFormat.format(playerList.get(playerNumber).getBalance()));
            txtBalanceAfterSale.setText(moneyFormat.format(sum));
            activeHouse = house;
            sellHouse.setVisible(true);
        }
        
        buttonStatus = false;
        toggleButtons(buttonStatus);   //Prevent making any other actions after choosing a house.
        
    }//GEN-LAST:event_buttonAction

    private void btnAddPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlayerActionPerformed
        // TODO add your handling code here:
        //Adds players. Called after add player button is clicked
        
        String playerName = txtPlayerName.getText();
        
        boolean playerUnique = true;
        
        for(int i = 0; i<playerList.size(); i++){   //Checks uniqueness of player name
            if(playerName.equals(playerList.get(i).getName())){
                playerUnique = false;
            }
        }
        
        if(playerUnique){   
            if(playerName.length()<100){    //Limit player name to 100 characters
                Player p = new Player(playerName,STARTING_PLAYER_BALANCE, playerNumber);
                playerList.add(p);
                txtPlayerName.setText("");
                playerNumber ++;
            }
            else{
                txtOutput.setText("Player name must be less than 100 characters.");
            }
        }
        else{
            txtOutput.setText("Name not unique. Please change and try again.");
        }
        
        if(playerNumber == getNumberOfPlayers()){   //If all players are added
            buttonStatus = true;
            toggleButtons(buttonStatus);    //Enable other buttons
            btnSave.setEnabled(true);
            btnRestartGame.setEnabled(true);
            btnEndTurn.setEnabled(true);
            rdoTwoPlayer.setEnabled(false); //Disable buttons related to adding players
            rdoThreePlayer.setEnabled(false);
            rdoFourPlayer.setEnabled(false);
            btnAddPlayer.setEnabled(false);
            txtPlayerName.setEnabled(false);
            playerNumber = 0;   //reset player number to first player
            gameLoop(); //Start game looping
        }
    }//GEN-LAST:event_btnAddPlayerActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        //Create game object with all important data included.
        Game game = new Game(GAME_BOARD_HEIGHT, GAME_BOARD_WIDTH, TAX_RATE, STARTING_PLAYER_BALANCE, MINIMUM_BLOCK_QUANTITY, MAXIMUM_BLOCK_QUANTITY, BLOCK_FACTOR_MINIMUM, 
            BLOCK_FACTOR_MAXIMUM, MINIMUM_HOUSE_PRICE, MAXIMUM_HOUSE_PRICE, blockFactors, playerNumber, activeHouse, currentPlayer, buttonStatus, houseList, playerList, buttons, buttonColors); //Create game 
        
        //Save game to file on disk
        game.saveGame();
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        
        //Parses game object from file, and assignes parsed data to current game variables
        
        try{ 
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("savegame.dat"));
        Game readGame = (Game)in.readObject();
        
        //Load values from object. Constants included because game loaded might have been created with different constants.
        GAME_BOARD_HEIGHT = readGame.getGAME_BOARD_HEIGHT();
        GAME_BOARD_WIDTH = readGame.getGAME_BOARD_WIDTH();
        TAX_RATE = readGame.getTAX_RATE();
        STARTING_PLAYER_BALANCE = readGame.getSTARTING_PLAYER_BALANCE();
        MINIMUM_BLOCK_QUANTITY = readGame.getMINIMUM_BLOCK_QUANTITY();
        MAXIMUM_BLOCK_QUANTITY = readGame.getMAXIMUM_BLOCK_QUANTITY();
        BLOCK_FACTOR_MINIMUM = readGame.getBLOCK_FACTOR_MINIMUM();
        BLOCK_FACTOR_MAXIMUM = readGame.getBLOCK_FACTOR_MAXIMUM();
        MINIMUM_HOUSE_PRICE = readGame.getMINIMUM_HOUSE_PRICE();
        MAXIMUM_HOUSE_PRICE = readGame.getMAXIMUM_HOUSE_PRICE();
    
        blockFactors = readGame.getBlockFactors();
        playerNumber = readGame.getPlayerNumber();  
        activeHouse = readGame.getActiveHouse();
        currentPlayer = readGame.getCurrentPlayer();
        buttonStatus = readGame.getButtonStatus();
        
        houseList = readGame.getHouseList();
        playerList = readGame.getPlayerList();
    
        buttons = readGame.getButtons();
        buttonColors = readGame.getButtonColors();
        
        //Initialize game
        toggleButtons(buttonStatus);    //Enable other buttons
        btnSave.setEnabled(true);
        btnRestartGame.setEnabled(true);
        btnEndTurn.setEnabled(true);
        rdoTwoPlayer.setEnabled(false); //Disable buttons related to adding players
        rdoThreePlayer.setEnabled(false);
        rdoFourPlayer.setEnabled(false);
        btnAddPlayer.setEnabled(false);
        txtPlayerName.setEnabled(false);
        
        displayCurrentPlayer();
        displayAvailible();
        assignActionCommand();
        
        //Set block colors
        for(int i = 0; i < GAME_BOARD_HEIGHT; i++){ 
            for(int j = 0; j <GAME_BOARD_WIDTH; j ++){   
                buttons[i][j].setBackground(buttonColors[houseList.get(i).get(j).getBlock()]);
                }
            }   
        }
        catch(Exception e){
            System.out.println(e.getClass().getName());
        }
        
        
                
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        // TODO add your handling code here:
        playerList.get(playerNumber).buyHouse(activeHouse); //Player with currently active turn buys house
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action       
        buyHouse.dispose();
        displayCurrentPlayer();
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnBuyDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyDeclineActionPerformed
        // TODO add your handling code here:
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action
        buyHouse.dispose(); //Close buy dialog
        displayCurrentPlayer();
        
    }//GEN-LAST:event_btnBuyDeclineActionPerformed

    private void btnEndTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndTurnActionPerformed
        // TODO add your handling code here:
        playerNumber++; //Increment playerNumber because current player has ended turn.
        if(playerNumber>playerList.size()-1){   //If player number goes over the number of players.
            playerNumber = 0;   //Reset it back to 0
        }
        buttonStatus = true;
        toggleButtons(buttonStatus);    //Enable other buttons
        gameLoop();
    }//GEN-LAST:event_btnEndTurnActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        // TODO add your handling code here:        
        playerList.get(playerNumber).sellHouse(activeHouse);    //Curent player sells house which was clicked on.
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action
        sellHouse.dispose();
        displayCurrentPlayer();
    }//GEN-LAST:event_btnSellActionPerformed

    private void btnSellDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellDeclineActionPerformed
        // TODO add your handling code here:
        sellHouse.dispose();    //If sell is declined, close window anyways.
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action
        displayCurrentPlayer();
    }//GEN-LAST:event_btnSellDeclineActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action
        playerBankrupt.dispose();   //Close window when Ok is pressed.
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnOk2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOk2ActionPerformed
        // TODO add your handling code here:
        btnEndTurn.setEnabled(true); //Reenable end turn after player takes action
        gameFinished.dispose();
    }//GEN-LAST:event_btnOk2ActionPerformed

    private void btnRestartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartGameActionPerformed
        // TODO add your handling code here:
        //Clear game variables and set game to pre-start status.
        blockFactors = null;   
        playerNumber = 0;   
        activeHouse = null;
        currentPlayer = null;
        buttonStatus = false;   
            
        houseList = new ArrayList<>();  
        playerList = new ArrayList<>(); 
        
        btnAddPlayer.setEnabled(false); 
        txtPlayerName.setEnabled(false);
        btnStartGame.setEnabled(true);
        btnSave.setEnabled(false);
        
        rdoTwoPlayer.setEnabled(true); 
        rdoThreePlayer.setEnabled(true);
        rdoFourPlayer.setEnabled(true);
        
        toggleButtons(buttonStatus);    //Disable buttons
        
        txtOutput.setText("");
        txtCurrentPlayer.setText("");
        txtPlayerBalance.setText("");
        txtaProperties.setText("");
        
        btnRestartGame.setEnabled(false);
    }//GEN-LAST:event_btnRestartGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Property_Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Property_Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Property_Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Property_Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Property_Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton A1;
    private javax.swing.JButton A2;
    private javax.swing.JButton A3;
    private javax.swing.JButton A4;
    private javax.swing.JButton A5;
    private javax.swing.JButton A6;
    private javax.swing.JButton A7;
    private javax.swing.JButton B1;
    private javax.swing.JButton B2;
    private javax.swing.JButton B3;
    private javax.swing.JButton B4;
    private javax.swing.JButton B5;
    private javax.swing.JButton B6;
    private javax.swing.JButton B7;
    private javax.swing.JButton C1;
    private javax.swing.JButton C2;
    private javax.swing.JButton C3;
    private javax.swing.JButton C4;
    private javax.swing.JButton C5;
    private javax.swing.JButton C6;
    private javax.swing.JButton C7;
    private javax.swing.JButton D1;
    private javax.swing.JButton D2;
    private javax.swing.JButton D3;
    private javax.swing.JButton D4;
    private javax.swing.JButton D5;
    private javax.swing.JButton D6;
    private javax.swing.JButton D7;
    private javax.swing.JButton E1;
    private javax.swing.JButton E2;
    private javax.swing.JButton E3;
    private javax.swing.JButton E4;
    private javax.swing.JButton E5;
    private javax.swing.JButton E6;
    private javax.swing.JButton E7;
    private javax.swing.JButton F1;
    private javax.swing.JButton F2;
    private javax.swing.JButton F3;
    private javax.swing.JButton F4;
    private javax.swing.JButton F5;
    private javax.swing.JButton F6;
    private javax.swing.JButton F7;
    private javax.swing.JButton G1;
    private javax.swing.JButton G2;
    private javax.swing.JButton G3;
    private javax.swing.JButton G4;
    private javax.swing.JButton G5;
    private javax.swing.JButton G6;
    private javax.swing.JButton G7;
    private javax.swing.JButton btnAddPlayer;
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnBuyDecline;
    private javax.swing.JButton btnEndTurn;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnOk2;
    private javax.swing.JButton btnRestartGame;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSell;
    private javax.swing.JButton btnSellDecline;
    private javax.swing.JButton btnStartGame;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JDialog buyHouse;
    private javax.swing.JDialog gameFinished;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBalanceAfterPurchase;
    private javax.swing.JLabel lblBalanceAfterSale;
    private javax.swing.JLabel lblBuyBalance;
    private javax.swing.JLabel lblBuyHouse;
    private javax.swing.JLabel lblDescription1;
    private javax.swing.JLabel lblDescription2;
    private javax.swing.JLabel lblGame;
    private javax.swing.JLabel lblGameFinished;
    private javax.swing.JLabel lblNumberOfPlayers;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblSell;
    private javax.swing.JLabel lblSellBalance;
    private javax.swing.JLabel lblSellHouse;
    private javax.swing.JDialog playerBankrupt;
    private javax.swing.JRadioButton rdoFourPlayer;
    private javax.swing.JRadioButton rdoThreePlayer;
    private javax.swing.JRadioButton rdoTwoPlayer;
    private javax.swing.JDialog sellHouse;
    private javax.swing.JTextField txtBalanceAfterPurchase;
    private javax.swing.JTextField txtBalanceAfterSale;
    private javax.swing.JTextField txtBuyOutput;
    private javax.swing.JTextField txtCurrentPlayer;
    private javax.swing.JTextField txtHouseBuyPrice;
    private javax.swing.JTextField txtHouseSellPrice;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtPlayerBalance;
    private javax.swing.JTextField txtPlayerBankrupt;
    private javax.swing.JTextField txtPlayerBuyBalance;
    private javax.swing.JTextField txtPlayerName;
    private javax.swing.JTextField txtPlayerSellBalance;
    private javax.swing.JTextField txtSellOutput;
    private javax.swing.JTextField txtWinnerOutput;
    private javax.swing.JTextArea txtaProperties;
    private javax.swing.JTextArea txtaResults;
    // End of variables declaration//GEN-END:variables
    
    
    
}
